[정기수업]
출력
https://github.com/itdanjalog/tj_2024A_backend/blob/master/src/day02/Step4.java

- 출력 함수
    1. System.out.print()
        + 콘솔창 출력 , print( 리터럴 또는 호출변수명 또는 연산식 또는 호출함수명 )
    2. System.out.println()                 sout + 엔터
        + 콘솔창 출력
        + 출력후 줄바꿈 포함
    3. System.out.printf()                  souf + 엔터
        + 콘솔창 출력
        + printf( "형식문자 포함한 문자열" , 값1 , 값2 ,값3 );

    - 제어/이스케이프 문자 : 기능이 포함된 특수문자
        \n : 줄바꿈 , \t : 들여쓰기 , \r : 개행 , \\ : '\'출력 , \" : '"'출력 , \' : "'"출력

    - 형식/포멧 문자 : 출력시 형식에 맞추어 자료을 출력
        %d : 정수 , %f : 실수 , %s : 문자열 , %c : 문자
        %자릿수d : 해당 자릿수 만큼 자리 차지 , 단 자료의 길이가 부족하면 공백으로 채움 , 오른쪽 정렬
        %-자릿수d : 해당 자릿수 만큼 자리 차지 , 단 자료의 길이가 부족하면 공백으로 채움 , 왼쪽 정렬
        %0자릿수d : 해당 자릿수 만큼 자리 차지 , 단 자료의 길이가 부족하면 0 으로 채움 , 오른쪽 정렬
        %자릿수.소수점f : 소수점 개수 만큼 소수점 출력 , 단 소수점은 자릿수 포함된 길이


/*
    - 형식문자 : printf() 함수에서 사용되는 형식문자
    %s  : 문자열   %c  : 문자
    %d  : 정수    %f  : 실수
        [ 자릿수 맞추기 ]
        %자릿수d   : 자릿수만큼 자릿수를 차지 , 만일 비어있으면 공백처리 , 오른쪽정렬
        %-자릿수d  : 자릿수만큼 자릿수를 차지 , 만일 비어있으면 공백처리 , 왼쪽정렬
        %0잘릿수d  : 자릿수만큼 자릿수를 차지 , 만일 비어있으면 '0'처리 , 오른쪽정렬
        [ 소수점 ]
        %자릿수.소수점자릿수f    : 자릿수(소수점포함)만큼 자릿수를 차지 , 소수점자릿수까지 출력

    - 제어문자 : 기능이 포함된 문자
    \ : 엔터 위에 원화기호
    \n : 줄바꿈        \t : 들여쓰기
    \r : 개행(커서를 앞으로)
    \\ : '\' 백슬래시 출력    ,   \" : " 큰따옴표 출력  , \' : ' 작은따옴표 출력
    -- 엔터 : \n\r 조합


*/

입력
https://github.com/itdanjalog/tj_2024A_backend/blob/master/src/day03/Step1.java

// [1] 입력 함수 , JS : prompt()
// 입력 객체 만들기
    // 1. new Scanner();                            : Scanner 클래스 : 입력에 관련된 객체 생성
    // 2. new Scanner( System.in );                 : System.in : 입력 장치는 키보드
    // 3. Scanner scan  = new Scanner( System.in ); : Scanner 타입으로 변수에 생성된 입력객체를 저장한다.
    // 4. 입력객체의 메소드를 이용한 입력값 가져오기
/*
        1. .next()                      : 키보드 입력받은 바이트/자료 을 문자열(String) 타입으로 반환
        2. .nextLine()                  : next() 동일
            next()      : 띄어쓰기 포함된 문자열도 입력받기 불가능
            nextLine() : 띄어쓰기 포함된 문자열도 입력받기 가능
                - 단 nextLine() 위에 입력관련 메소드가 존재하면 하나로 취급
                - 개행[엔터] 기준으로 마침 처리 , next() + nextLine() : 하나로 취급 당함
                - 해결방안
                    의미없는 nextLine() 두 메소드 사이에 추가한다.
        3. .nextBoolean()
        4. .nextByte()
        5. .nextShort()
        6. .nextInt()
        7. .nextLong()
        8. .nextFloat()
        9. .nextDouble()
        * char c1 = scan.next().charAt(0);
 */

[단과수업]
