- 1. 객체 생성
- 2. 객체 필드
- 3. 객체 메소드

- 1. 객체 생성자( 오버로딩 )
- 2. static , final static / 상속 extends
- 3. 오버라이딩 , 접근제한자

- 객체
    - 객체(Object) : 객(손님 객)
        - 주체(나) 가 아닌 다른 주체(타인) 라는 실체
        - 즉] 본인 이외의 다른 실체(주체)
    - 주체(Subject) : 주(주인 주)
        - '나' 라는 실체
    --> 주체(나=개발자) 가 컴퓨터를 이용해서 다른 실체(객체) 를 다루는 작업
        ---> 생활속 객체 : 안경 , 컴퓨터 , 마우스 , 라면 , 엘레베이터 , 공기 등등
        ---> 컴퓨터속 객체 : 게임(캐릭터) , 게시물(홈페이지) , 문서파일, 돈(비트코인) 등등

- 객체지향 프로그래밍
    - 객체지향 : 객체('나' 이외의 다른 실체) 를 목표로 해서 나아가다.
    - 프로그래밍 : 프로그램을 만드는 일
        + 객체를 활용해서 프로그램을 만드는 일
    - 언어 : JAVA , PYTHON , JS , C# 프로그래밍 언어에서 사용되고 있다.
    - 알아야 되는 이유 : 산업혁명 변화 되면서 점점 디지털 기술이 커지고 있다.
        - 사람이 일 하는 시대 가 아닌 디지털 일하는 시대
    - 자바에서 객체로 무엇을 하는지 ? 생활속 객체의 성질 과 행동을 정의/만들(클래스) 해서 컴퓨터 세상속에서 다룬다.

- 프로그래밍 객체
    - 객체 가 가지는 정보
        - 고유성질 : 성질/속성/필드
        - 행위 : 이벤트/함수

    - 클래스 : 객체의 정보를 미리 정의/만드는 작성된 곳
        - 객체 정보[성질/행위]의 설계도
        - 일정한 규약 ( 객체를 사용하는 사람끼리 약속 ) , 재사용 ( 반복 사용 )

    ex1 자동차 ]
        자동차 객체 : 성질( 색상 , 속도 , 모델명 , 제조회사 ) 등등
                    행위( 전진하는 행위 , 후진하는 행위 , 중립하는 행위 ) 등등
        현대차 '아반떼' 설계도
                - 성질 : 색상 , 속도 , 모델명 , 제조회사
                - 행위 : 전진하는 행위 , 후진하는 행위 , 중립하는 행위

        '유재석' 아반떼 구매 : 아반떼 객체1 ( 색상:노랑 , 유재석의 차가 전진하는 행위 )
        '강호동' 아반떼 구매 : 아반떼 객체2 ( 색상:빨강 , x )
            - 두 자동차의 클래스(설계도)는 같지만 객체(실체) 는 다르다.

    ex2 사람 ]
        사람 객체 : 성질( 이름 , 성별 , 나이 , 몸무게 , 키 ) 등등
                   행위( 걷기 행위 , 타이핑 행위 , 먹다 행위 ) 등등
        '유재석' 사람(회원) 생성 : 유재석 (사람)객체 ( 이름:유재석 , 먹다 행위 )
        '강호동' 사람 생성 : 강호동 (사람)객체  ( 이름:강호동 , x )

    ex3 붕어빵 ]
        - 클래스 : 붕어빵 틀(클래스) 구매 /생성
        - 붕어빵 3개 주세요.
        붕어빵1(객체) , 붕어빵2(객체) , 붕어빵3(객체)

[1] 필드란 ?

[1] 메소드 란 ?
    - 멤버 함수 또는 메소드 라고 불린다.
    - 함수/메소드
        -> 함(담을 함) , 수 : 숫자 뜻 : 숫자를 담은 함
        -> 누군가 가 미리 숫자들을 담았다. -> 미리 코드 들을  담았다.
        * 변수란 : 하나의 자료를 저장하는 메모리 공간
        * 함수/메소드: 코드/명령어 들을 저장하는 공간

    - 함수/메소드 사용하는 이유 ,
        1. 코드 재사용 : 미리 정의된 코드들을 반복 사용하기 위해서 사용된다.
        2. 클린코딩(중복된 코드를 제거 ) : 코드의 중복을 줄이고 조금 더 간결한 코딩을 할수 있다.
        3. 유지보수 : 특정한 기준으로 코드들을 { } 중괄호를 이용해서 묶었기 때문에 묶음 단위 이므로 유지보수가 좋아진다.
        4. 가독성 : 기능별로 묶었기 때문에 코드 읽기가 편하다.
        5. 라이브러리/프레임워크 : (남이 만든) 함수의 내부적인 코드를 몰라도 함수 사용은 가능하다.
            System.out.print() : print() 함수가 어떻게 만들어졌는지는 모르지만 사용/활용 가능하다.

    - 변수 사용하는 이유 : 1. 자료를 여러번 사용하기 위해 2.복잡한 계산식의 결과를 하나의 메모리에서 사용 등등

    - 함수

            X = 3 , Y = 5   <-- 함수 입구 ( 매개변수의값 , 인자값 , 인수 )
        |------     ------|
        |                 |
        |      X + Y      | 함수내부( 여러 명령어/코드 )
        |                 |
        |-------    ------|
            result = 8      <--- 함수 출구 ( 리턴값 , 반환값 )

    - 메소드 선언하는 방법
        반환타입 메소드명( 타입 매개변수명 , 타입 매개변수명 ) {
            코드명령어;
            코드명령어;
            코드명령어;
            return 값; <--- 반환타입의 허용범위내 값을 반환 할수 있다.
        }

    - 용어
        1. 매개변수 : 함수 호출/사용 시 함수 안으로 들어오는 값를 저장하는 변수
        2. 반환값 : 함수 종료 될때 함수를 호출했던 곳으로 반환 해주는 값
        3. 반환타입 : 반환값의 허용범위 타입 지정
        4. 실행문 : 함수가 호출될때 실행되는 코드명령어.
