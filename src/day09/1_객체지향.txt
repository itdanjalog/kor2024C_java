[ 객체지향 ]
    - 주(주인 주 / Subject ) 체(실체)
        - '나' 라는 실체
    - 객(손님 객 / Object ) 체(실체)
        - 주체'나' 가 아닌 다른(타인) 라는 실체
        - 즉] 본인 이외의 다른 실체
    - 기준이 되는 대상
        - 기준 : '나' 라는 김현수 강사 기준으로 김현수는 주체 , 수강생분들 모두 객체
        - 기준 : '유재석' 라는 수강색 기준으로 '유재석'는 주체 , 강사는 객체
        - 개발로 기준 생각.
            - 개발 하는 사람 : '나'(개발자/사용자) - 주체 , 컴퓨터에 '실체' 생성/대상 - 객체
        - 생활에서 생각.
            - 객체( 공기 , 안경 , TV , 모니터 , 핸드폰 등등 ) 세상에 존재하는 모든 물리적 형태물 객체인가요? O
            - 객체( 수강 , 스케줄 , 비트코인 등등 ) 세상에 존재하는 모든 논리적 형태물 객체인가요? O
        - 객체가 포함하는 정보
            1. 고유한 성질 2. 행위
    - 결론 : 객체지향 언어가 인기가 많은 이유가 세상에 모든것들을 컴퓨터 안에서 표현할수 있기 때문에

[ 객체지향 프로그래밍]
    1. 객체지향 : 객체 를 목표로 해서 프로그래밍(개발) 을 해서 나아가는 것
    2. 주요언어 : JAVA , PYTHON , JS , C# 등등
    3. 사용목적 : 산업혁명 변화 되면서 점점 디지털 기술에 중요한 역할을 한다.
    4. 사용이유 : 생활속에 모든 논리적/물리적 형태/개념의 성질과 행위 들을 컴퓨터 속 에서 표현이 가능하다.

[ 객체 ]
    1. 객체가 가질수 있는 정보 : 1.고유성질(속성/필드/상태값 등등) 2.행위( 이벤트/함수/메소드 )
    2. 객체를 만들기 위해서 필요한 정보 : 클래스 정보
    3. 객체를 만드는 방법
        1. new 클래스명();
        - 클래스명 변수명 = new 클래스명();    : 주로 객체 (위치)주소 는 변수에 대입한다.

    4. 객체변수를 이용한 객체내 필드,메소드 접근방법
        1. 객체변수명.필드명
        2. 객체변수명.메소드명()

[ 클래스 ]
    1. 객체를 만들기 위해 객체의 정보를 미리 정의 하는 곳
    2. '객체의 설계도' 이라고도 한다.
    3. 클래스를 만드는 방법
        1. 클래스를 만들고자 하는 패키지명을 오른쪽 클릭
        2. NEW -> JAVA CLASS
        3. 클래스명 작성 :
            1. 첫글자는 대문자 권장(필수) 2. 띄어쓰기 불가능
            3.숫자로 시작 불가능 4.특정한 특수문자 가능하다.
    4. 클래스에서 객체정보를 설계하는 방법
        1. { } 안에서 클래스멤버를 작성한다.

[ 메소드/함수 ]
    - 수학 : 일차함수 y = 3x + 4 # x = 2 이면 y = 10
    - 컴퓨터 : 함수( 내가 정의한 코드 ) # 매개변수 넣고 결과를 반환하는 구조
    - [ 매개변수] : 메소드가 호출될때 메소드 안으로 들어온 값을 저장하는 변수
    - [ 반환값 ] : 메소드가 종료될때 호출했던 곳으로 특정 값을 반환하는 값
    - * 단 매개변수를 여러개 존재 하지만 반환값은 언제나 항상 1개만 가능하다.
    - 메소드 만드는 방법

        반환타입 메소드명( 타입 매개변수1 , 타입 매개변수2 ){
            함수의 실행코드;
            return 반환값;
        }

        1. 반환타입 : 반환값의 자료형 타입 명시 하는곳 # void는 return(반환) 없다는 뜻
        2. 메소드명 : 카멜표기법 권장(변수와 동일한 조건 )
        3. 매개변수 : 메소드가 실행될때 메소드 안으로 들어오는 자료를 저장하는 변수
            # 여러개 매개변수를 , 로 구분하며 타입을 명시해야한다.
        4. 실행코드 : 메소드가 실행될때 처리되는 코드들
        5. return  : 메소드가 종됴될때 메소드를 호출했던 곳으로 반환값을 반환해주는 키워드
            # 단 return 값 , 값를 생략하는 경우도 있다. 반환값 없이 함수 종료를 뜻한다.

- 예시1 ] '유재석' 과 '강호동' 이라는 것들을 컴퓨터 세상으로 표현하고 싶다.
    사람 객체 : 1.성질( 이름 , 나이 , 키 , 몸무게 등등 ) 2. 행위( 밥먹기 , 걷기 , 뛰기 , 잠자기 등등 )
    - 객체 설계자 입장해서 본인이 필요한 성질한 행위를 클래스에 설계 해야한다.
    - 1.유재석 객체( 이름:유재석 , 나이 : 40 ) 2. 강호동 객체( 이름 : 강호동 , 나이 : 50 )
        - 유재석이 '밥먹기' 행위를 했을때  '강호동' 객체는 같이 '밥먹기' 행위를 하지 않는다.
        - 클래스(설계도) 는 같지만 같은 클래스 기반으로 만들어진 두 객체는 서로 다르다.
            - 부모는 같지만 '누나' 와 '나' 는 다른 사람 이다.

- 예시2 ] '내차' 과 '친구차' 이라는 것들을 커퓨터 세상으로 표현
    - 차 객체 설계
        1.성질( 모델 , 색상 , 속도 , 상태 , 차주 등등 )
        2.행위( 전진 , 후진 , 시동걸기 , 시동끄기 등등 )
    -  내차( 모델:'모닝' , 색상 : 파랑 ) , 친구차( 모델:'모닝' , 색상 : 노랑 )
        - 내차(객체1) 가 시동(메소드실행) 걸면 친구차(객체2) 도 시동(메소드실행) 이 걸리나요? X
        - 클래스는 같지만 객체는 서로 독립적이다.










